# Security Scan Stage Template for Contrast Security Integration
# This template defines the security scanning stage using Contrast Security Local Scan Engine

parameters:
  - name: dependsOn
    type: string
    default: 'Build'
  - name: artifactName
    type: string
    default: 'application-artifacts'
  - name: javaVersion
    type: string
    default: '17'

stages:
  - stage: SecurityScan
    displayName: 'Contrast Security Scan'
    dependsOn: ${{ parameters.dependsOn }}
    jobs:
      - job: ContrastScan
        displayName: 'Contrast Local Scan'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Download build artifacts
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: '${{ parameters.artifactName }}'
              downloadPath: '$(artifactPath)'
            displayName: 'Download Build Artifacts'
          
          # Set up Java 17 for Contrast Local Scan Engine
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '${{ parameters.javaVersion }}'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
            displayName: 'Set up Java ${{ parameters.javaVersion }} for Scanner'
          
          # Create directories for scanner and results
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(Pipeline.Workspace)/contrast
                mkdir -p $(contrastResultsPath)
              displayName: 'Create Required Directories'
          
          # Download Contrast Local Scan Engine
          - task: Bash@3
            inputs:
              targetType: 'filePath'
              filePath: '$(System.DefaultWorkingDirectory)/scripts/download-scanner.sh'
              arguments: '$(contrastScannerPath)'
            env:
              CONTRAST__API__URL: $(CONTRAST__API__URL)
              CONTRAST__API__USER_NAME: $(CONTRAST__API__USER_NAME)
              CONTRAST__API__API_KEY: $(CONTRAST__API__API_KEY)
              CONTRAST__API__SERVICE_KEY: $(CONTRAST__API__SERVICE_KEY)
              CONTRAST__API__ORGANIZATION: $(CONTRAST__API__ORGANIZATION)
            displayName: 'Download Contrast Local Scan Engine'
          
          # Run the Contrast Local Scan
          - task: Bash@3
            inputs:
              targetType: 'filePath'
              filePath: '$(System.DefaultWorkingDirectory)/scripts/run-contrast-scan.sh'
              arguments: '$(contrastScannerPath) "$(artifactPath)" "$(contrastResultsPath)" "$(contrastProjectName)" "$(Build.BuildNumber)" "$(Build.SourceBranchName)"'
            displayName: 'Run Contrast Local Scan'
            env:
              CONTRAST__API__URL: $(CONTRAST__API__URL)
              CONTRAST__API__USER_NAME: $(CONTRAST__API__USER_NAME)
              CONTRAST__API__API_KEY: $(CONTRAST__API__API_KEY)
              CONTRAST__API__SERVICE_KEY: $(CONTRAST__API__SERVICE_KEY)
              CONTRAST__API__ORGANIZATION: $(CONTRAST__API__ORGANIZATION)
          
          # Publish scan results as artifacts
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(contrastResultsPath)'
              ArtifactName: 'ContrastScanResults'
              publishLocation: 'Container'
            displayName: 'Publish Scan Results'
            condition: always()  # Always publish results, even if scan fails
          
          # Evaluate security gate
          - task: Bash@3
            inputs:
              targetType: 'filePath'
              filePath: '$(System.DefaultWorkingDirectory)/scripts/evaluate-results.sh'
              arguments: '"$(contrastResultsPath)/results.sarif" "$(maxHighSeverity)" "$(maxMediumSeverity)"'
            displayName: 'Evaluate Security Gate'
